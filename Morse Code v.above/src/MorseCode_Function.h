#ifndef __Morse_Code_Function__
#define __Morse_Code_Function__
#include "Counter.h"
#include "C_Low_Library.h"

#define NEE555_OC_INPUT_PIN   2
//////////////////////// MC_Library ////////////////////////
#define SUBSIZE               7
#define DATA_INPUT_SIZE       7
#define LIBRARY_SIZE         54
////////////////////////////////////////////////////////////
#define COLUMN_SIZE           5
#define ROW_COLUMN_SIZE      32
#define DURATION            100 // miliseconds

#define PRESSED             100
#define BUZZ_DURATION       100

static struct pt buzz_thread;

typedef struct Pintype {
  uint8_t twoPin, singlePin, enterPin, buzzPin;
} Pin;

// Morse code library: each sub-array represents a character in Morse code
const uint8_t mLibrary[54][7] = {
  { 0x1, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0 }, { 0x2, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0 }, 
  { 0x2, 0x1, 0x2, 0x1, 0x0, 0x0, 0x0 }, { 0x2, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0 }, 
  { 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }, { 0x1, 0x1, 0x2, 0x1, 0x0, 0x0, 0x0 }, 
  { 0x2, 0x2, 0x1, 0x0, 0x0, 0x0, 0x0 }, { 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0 }, 
  { 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0 }, { 0x1, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0 }, 
  { 0x2, 0x1, 0x2, 0x0, 0x0, 0x0, 0x0 }, { 0x1, 0x2, 0x1, 0x1, 0x0, 0x0, 0x0 }, 
  { 0x2, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0 }, { 0x2, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0 },
  { 0x2, 0x2, 0x2, 0x0, 0x0, 0x0, 0x0 }, { 0x1, 0x2, 0x2, 0x1, 0x0, 0x0, 0x0 }, 
  { 0x2, 0x2, 0x1, 0x2, 0x0, 0x0, 0x0 }, { 0x1, 0x2, 0x1, 0x0, 0x0, 0x0, 0x0 }, 
  { 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0 }, { 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }, 
  { 0x1, 0x1, 0x2, 0x0, 0x0, 0x0, 0x0 }, { 0x1, 0x1, 0x1, 0x2, 0x0, 0x0, 0x0 }, 
  { 0x1, 0x2, 0x2, 0x0, 0x0, 0x0, 0x0 }, { 0x2, 0x1, 0x1, 0x2, 0x0, 0x0, 0x0 }, 
  { 0x2, 0x1, 0x2, 0x2, 0x0, 0x0, 0x0 }, { 0x2, 0x2, 0x1, 0x1, 0x0, 0x0, 0x0 },

  { 0x1, 0x2, 0x2, 0x2, 0x2, 0x0, 0x0 }, { 0x1, 0x1, 0x2, 0x2, 0x2, 0x0, 0x0 }, 
  { 0x1, 0x1, 0x1, 0x2, 0x2, 0x0, 0x0 }, { 0x1, 0x1, 0x1, 0x1, 0x2, 0x0, 0x0 }, 
  { 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0 }, { 0x2, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0 },
  { 0x2, 0x2, 0x1, 0x1, 0x1, 0x0, 0x0 }, { 0x2, 0x2, 0x2, 0x1, 0x1, 0x0, 0x0 }, 
  { 0x2, 0x2, 0x2, 0x2, 0x1, 0x0, 0x0 }, { 0x2, 0x2, 0x2, 0x2, 0x2, 0x0, 0x0 },
                                      
  { 0x1, 0x2, 0x1, 0x2, 0x1, 0x2, 0x0 }, { 0x2, 0x2, 0x1, 0x1, 0x2, 0x2, 0x0 }, 
  { 0x1, 0x1, 0x2, 0x2, 0x1, 0x1, 0x0 }, { 0x2, 0x1, 0x2, 0x1, 0x2, 0x2, 0x0 }, 
  { 0x1, 0x2, 0x2, 0x2, 0x2, 0x1, 0x0 }, { 0x1, 0x2, 0x1, 0x1, 0x2, 0x1, 0x0 }, 
  { 0x2, 0x1, 0x2, 0x2, 0x1, 0x0, 0x0 }, { 0x2, 0x1, 0x2, 0x2, 0x1, 0x2, 0x0 }, 
  { 0x1, 0x2, 0x1, 0x1, 0x1, 0x0, 0x0 }, { 0x2, 0x2, 0x2, 0x1, 0x1, 0x1, 0x0 }, 
  { 0x2, 0x1, 0x2, 0x1, 0x2, 0x1, 0x0 }, { 0x2, 0x1, 0x1, 0x2, 0x1, 0x0, 0x0 }, 
  { 0x1, 0x1, 0x2, 0x2, 0x1, 0x2, 0x0 }, { 0x2, 0x1, 0x1, 0x1, 0x2, 0x0, 0x0 }, 
  { 0x1, 0x2, 0x1, 0x2, 0x1, 0x0, 0x0 }, { 0x2, 0x1, 0x1, 0x1, 0x1, 0x2, 0x0 }, 
  { 0x1, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2 }, { 0x1, 0x2, 0x2, 0x1, 0x2, 0x1, 0x0 }};
  
const char msLibrary[54] = {
  'A', 'B', 
  'C', 'D', 
  'E', 'F', 
  'G', 'H', 
  'I', 'J',
  'K', 'L', 
  'M', 'N', 
  'O', 'P', 
  'Q', 'R', 
  'S', 'T', 
  'U', 'V', 
  'W', 'X', 
  'Y', 'Z',

  '1', '2', 
  '3', '4', 
  '5', '6', 
  '7', '8', 
  '9', '0',

  '.', ',', 
  '?', '!',
  '\'','"', 
  '(', ')', 
  '&', ':',
  ';', '/', 
  '_', '=', 
  '+', '-', 
  '$', '@'};

void buzz_sound(volatile uint8_t& port, const uint8_t pin, const uint16_t duration)  __attribute__((cold)); // not commomly used

class MCL0 {
  public:
  /************************************************************************
  * Constructor
  * \param twoPin           long line input for encoding
  * \param singlePin        short dot input for encoding
  * \param buzzPin          Pin for buzzer (optional)
  * \param enterPin         Pin to enter the input into the microcontroller
  * \return                 void
  *************************************************************************/
  MCL0(uint8_t twoPin, uint8_t singlePin, uint8_t enterPin, uint8_t buzzPin);

  void ResetData(void) noexcept;
  void SelectInputDot(char* in);
  void BuzzSoundDecode(const char* arr2);
  void LoadCurrentLocation(const char* indexArr);
  bool SelectionInputChange(uint8_t& currentLine, uint8_t column_size = 5);
  void setBuzzSpeed(void);

  uint8_t currentLocation, dataSize = 0;

  bool pressedBuzz;

  private:
  Pin pin;

  uint8_t _dataInput[7] = {0,0,0,0,0,0,0};

  uint8_t _pressed_1, _currentLocation;

  bool holdingShortcut;

  void GetBuzzValue(const uint8_t* indexArr) const;
  char Decode(void) const __attribute__((hot));
  char CheckColumns(const uint8_t extendedValue) const __attribute__((hot));
  void BuzzSound(uint8_t pin, const int16_t duration) const __attribute__((cold)); // not finished
  void PressedBuzzSound(const uint8_t pin, const uint8_t value) const;
};

extern MCL0 mcl0;

struct NE555_INPUT { // not used
  static uint8_t input_pin;
  static volatile uint16_t buzzSpeed;
  static volatile bool buzz_thread_on;
  static volatile bool next_length;
};

//extern struct NE555_INPUT s_ne;

#endif